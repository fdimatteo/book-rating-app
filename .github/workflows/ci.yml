name: CI

on:
  push:
    branches:
      - main
      - feature/gh-actions

env:
  REGISTRY: ghcr.io
  # IMAGE_NAME: ${{ github.repository }} # fdimatteo/book-rating-app
  REPO_NAME: ${{ github.repository }} # fdimatteo/book-rating-app
  IMAGE_NAME: ${{ github.event.repository.name }} # book-rating-app
  CONTAINER_NAME: ${{ github.event.repository.name }} # book-rating-app
  COMMIT_SHA: ${{ github.sha }}

jobs:
  
  lint:
    runs-on: ubuntu-latest
    environment: development

    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint
        run: npm run lint
      
      - name: Test
        run: npm test

  test:
    runs-on: ubuntu-latest
    needs: lint
    environment: development

    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Test
        run: npm test

  build:
    runs-on: ubuntu-latest
    needs: test
    environment: development

    steps:
      - uses: actions/checkout@v4
 
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO_NAME }}

      - name: Build and export
        uses: docker/build-push-action@v6
        with:
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=${{ runner.temp }}/${{ env.IMAGE_NAME }}.tar
          build-args:
            COMMIT_SHA=${{ github.sha }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}
          path: ${{ runner.temp }}/${{ env.IMAGE_NAME }}.tar

    outputs:
      tags: ${{ steps.meta.outputs.tags }}

  release:
    runs-on: ubuntu-latest
    needs: build
    environment: development

    permissions:
      packages: write
      id-token: write
      attestations: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Retrieve build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}
          path: ${{ runner.temp }}

      - name: Load Docker image
        run: |
          docker load -i ${{ runner.temp }}/${{ env.IMAGE_NAME }}.tar
          docker image ls -a

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag and Push Docker image
        run: |
          docker tag ${{ needs.build.outputs.tags }} ${{ env.REGISTRY }}/${{ env.REPO_NAME }}:latest
          docker tag ${{ needs.build.outputs.tags }} ${{ env.REGISTRY }}/${{ env.REPO_NAME }}:${{ github.sha }}
          docker tag ${{ needs.build.outputs.tags }} ${{ env.REGISTRY }}/${{ env.REPO_NAME }}:${{ github.ref_name }}
          docker push ${{ env.REGISTRY }}/${{ env.REPO_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.REPO_NAME }}:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.REPO_NAME }}:${{ github.ref_name }}

  deploy:
    needs: release
    runs-on: ubuntu-latest
    environment: development
    
    steps:
      - name: Deploy
        id: action-ssh
        uses: tiyee/action-ssh@v1.0.1
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          privateKey: ${{ secrets.SSH_PRIVATE_KEY }}
          command: |
            podman login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            podman pull ${{ env.REGISTRY }}/${{ env.REPO_NAME }}:${{ github.ref_name }}
            podman stop ${{ env.CONTAINER_NAME }} || true
            podman rm ${{ env.CONTAINER_NAME }} || true
            podman run -d --name ${{ env.CONTAINER_NAME }} -p 3000:3000 ${{ env.REGISTRY }}/${{ env.REPO_NAME }}:${{ github.ref_name }}
            